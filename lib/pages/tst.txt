void scan ()
{ 

    var subscription = FlutterBluePlus.onScanResults.listen((results) 
    {
        if (results.isNotEmpty) 
        {
            ScanResult r = results.last; // the most recently found device
            print('${r.device.remoteId}: "${r.advertisementData.advName}" found!');
        }
    },

    onError: (e) => print(e),);

    FlutterBluePlus.cancelWhenScanComplete(subscription);

    // Wait for Bluetooth enabled & permission granted
    // In your real app you should use `FlutterBluePlus.adapterState.listen` to handle all states
    await FlutterBluePlus.adapterState.where((val) => val == BluetoothAdapterState.on).first;


    await FlutterBluePlus.startScan
    (
    withServices:[Guid("180D")],
    withNames:["Bluno"],
    timeout: Duration(seconds:15)
    );

    // wait for scanning to stop
    await FlutterBluePlus.isScanning.where((val) => val == false).first;
}


await device.connect(mtu:null, autoConnect:true)

// disable auto connect
await device.disconnect()


var subscription = device.connectionState.listen((BluetoothConnectionState state) async 
{
    if (state == BluetoothConnectionState.disconnected) 
    {
        // 1. typically, start a periodic timer that tries to 
        //    reconnect, or just call connect() again right now
        // 2. you must always re-discover services after disconnection!
        print("${device.disconnectReasonCode} ${device.disconnectReasonDescription}");
    }
});


device.cancelWhenDisconnected(subscription, delayed:true, next:true);

// Connect to the device
await device.connect();

// Disconnect from device
await device.disconnect();

// cancel to prevent duplicate listeners
subscription.cancel();


List<BluetoothDevice> devs = FlutterBluePlus.connectedDevices;
for (var d in devs) 
{
    print(d);
}